import os
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from dotenv import load_dotenv
from yookassa import Configuration, Payment
import uuid


logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


load_dotenv()


TOKEN = os.getenv('BOT_TOKEN')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY')

if not TOKEN:
    raise ValueError("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω")
if not YOOKASSA_SHOP_ID or not YOOKASSA_SECRET_KEY:
    raise ValueError("‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ÆKassa –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –î–æ–±–∞–≤—å—Ç–µ YOOKASSA_SHOP_ID –∏ YOOKASSA_SECRET_KEY –≤ .env")


print(f"Shop ID: {YOOKASSA_SHOP_ID}")
print(f"Secret Key: {YOOKASSA_SECRET_KEY}")


Configuration.account_id = YOOKASSA_SHOP_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

bot = Bot(token=TOKEN)
dp = Dispatcher()

ADMIN_IDS = []


class PaymentStates(StatesGroup):
    confirm_payment = State()
    awaiting_payment_confirmation = State()

class AdminStates(StatesGroup):
    menu = State()
    add_product_choose_category_type = State()
    add_product_category = State()
    add_product_name = State()
    add_product_desc = State()
    add_product_price = State()
    add_product_stock = State()
    add_product_promo = State()
    restock_category = State()
    restock_amount = State()
    delete_select_category = State()
    delete_select_product = State()


def init_db():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS products
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     category TEXT NOT NULL,
                     name TEXT NOT NULL,
                     description TEXT,
                     price INTEGER NOT NULL,
                     promo_code TEXT UNIQUE,
                     stock INTEGER DEFAULT 1,
                     created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS purchases
                     (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER NOT NULL,
                     product_id INTEGER NOT NULL,
                     purchase_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                     FOREIGN KEY (product_id) REFERENCES products (id))''')

    if not cursor.execute("SELECT 1 FROM products LIMIT 1").fetchone():
        initial_data = [
            ("üçî –ï–¥–∞", "–ú–∞–∫–¥–æ–Ω–∞–ª–¥—Å", "–°–∫–∏–¥–∫–∞ 20%", 150, "MCD2023", 15),
            ("üçî –ï–¥–∞", "KFC", "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫", 100, "KFCBEST", 10),
            ("üéÆ –ò–≥—Ä—ã", "Steam", "–ö–ª—é—á –¥–ª—è –ª—é–±–æ–π –∏–≥—Ä—ã", 500, "STEAM-1234", 5),
            ("üéÆ –ò–≥—Ä—ã", "Epic Games", "–†–∞–Ω–¥–æ–º–Ω—ã–π –∫–ª—é—á", 400, "EPIC-5678", 3),
            ("üì∫ –ü–æ–¥–ø–∏—Å–∫–∏", "Spotify", "3 –º–µ—Å—è—Ü–∞ Premium", 300, "SPOTY-2023", 8),
            ("üì∫ –ü–æ–¥–ø–∏—Å–∫–∏", "Netflix", "1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏", 350, "NETFLIX-2023", 6)
        ]
        cursor.executemany(
            "INSERT INTO products (category, name, description, price, promo_code, stock) VALUES (?, ?, ?, ?, ?, ?)",
            initial_data
        )
        conn.commit()

    conn.close()

init_db()


def get_categories(include_empty=False):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    query = "SELECT DISTINCT category FROM products" if include_empty else "SELECT DISTINCT category FROM products WHERE stock > 0"
    categories = cursor.execute(query).fetchall()
    conn.close()
    return [cat[0] for cat in categories]

def get_empty_categories():
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT DISTINCT p1.category 
        FROM products p1
        WHERE NOT EXISTS (
            SELECT 1 FROM products p2 
            WHERE p2.category = p1.category AND p2.stock > 0
        )
    ''')
    empty_categories = [cat[0] for cat in cursor.fetchall()]
    conn.close()
    return empty_categories

def create_yookassa_payment(amount, description, product_id):
    payment = Payment.create({
        "amount": {
            "value": str(amount),
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": "https://t.me/kolmakovmagazin_bot"
        },
        "description": description,
        "metadata": {"product_id": str(product_id)},
        "capture": True
    }, uuid.uuid4())
    return payment.id, payment.confirmation.confirmation_url

def admin_kb():
    kb = [
        [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é")],
        [KeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏")],
        [KeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")],
        [KeyboardButton(text="–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)

def main_kb():
    categories = get_categories(include_empty=True)
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")]
        for cat in categories
    ])

def products_kb(category):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    products = cursor.execute(
        "SELECT id, name, price, stock FROM products WHERE category = ?",
        (category,)
    ).fetchall()
    conn.close()
    buttons = [
        [InlineKeyboardButton(
            text=f"{p[1]} - {p[2]}‚ÇΩ ({p[3]} —à—Ç.)",
            callback_data=f"prod_{p[0]}"
        )] for p in products
    ]
    buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def payment_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", callback_data="confirm_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
    ])

def support_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=f"tg://user?id={ADMIN_IDS[0]}")]
    ])


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üõçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:",
        reply_markup=main_kb()
    )

@dp.message(Command("admin"))
async def admin_panel(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω")
        return
    await message.answer("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())
    await state.set_state(AdminStates.menu)

@dp.message(Command("history"))
async def history(message: types.Message):
    try:
        conn = sqlite3.connect('shop.db')
        cursor = conn.cursor()
        purchases = cursor.execute('''
            SELECT pu.id, p.name, p.category, p.price, pu.purchase_date 
            FROM purchases pu
            JOIN products p ON pu.product_id = p.id
            WHERE pu.user_id = ?
            ORDER BY pu.purchase_date DESC
            LIMIT 10
        ''', (message.from_user.id,)).fetchall()
        if not purchases:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫.")
            return
        text = "üìú –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∫—É–ø–æ–∫:\n\n"
        for purchase_id, name, category, price, date in purchases:
            text += f"üõí #{purchase_id}\n"
            text += f"–¢–æ–≤–∞—Ä: {name} ({category})\n"
            text += f"–¶–µ–Ω–∞: {price}‚ÇΩ\n"
            text += f"–î–∞—Ç–∞: {date}\n\n"
        await message.answer(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫")
    finally:
        conn.close()

@dp.message(Command("support"))
async def support_command(message: types.Message):
    await message.answer(
        "üõü –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø–æ–∫—É–ø–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞, "
        "–Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º",
        reply_markup=support_kb()
    )


@dp.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", AdminStates.menu)
async def add_product(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="new_category")
    builder.button(text="–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="existing_category")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.add_product_choose_category_type)

@dp.callback_query(F.data == "new_category", AdminStates.add_product_choose_category_type)
async def new_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    await state.set_state(AdminStates.add_product_category)

@dp.callback_query(F.data == "existing_category", AdminStates.add_product_choose_category_type)
async def existing_category(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    categories = get_categories(include_empty=True)
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat, callback_data=f"existing_cat_{cat}")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.add_product_category)

@dp.callback_query(F.data.startswith("existing_cat_"), AdminStates.add_product_category)
async def existing_category_select(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    category = callback.data.split("_", 2)[2]
    await state.update_data(category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.add_product_name)

@dp.message(AdminStates.add_product_category)
async def add_product_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.add_product_name)

@dp.message(AdminStates.add_product_name)
async def add_product_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.add_product_desc)

@dp.message(AdminStates.add_product_desc)
async def add_product_desc(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.add_product_price)

@dp.message(AdminStates.add_product_price)
async def add_product_price(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):")
        return
    await state.update_data(price=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(AdminStates.add_product_stock)

@dp.message(AdminStates.add_product_stock)
async def add_product_stock(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):")
        return
    await state.update_data(stock=int(message.text))
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ —Ç–æ–≤–∞—Ä–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å, –∏–ª–∏ '–Ω–µ—Ç'):")
    await state.set_state(AdminStates.add_product_promo)

@dp.message(AdminStates.add_product_promo)
async def add_product_promo(message: types.Message, state: FSMContext):
    promo_code = message.text.strip() if message.text.strip().lower() != '–Ω–µ—Ç' else None
    data = await state.get_data()
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    try:
        cursor.execute(
            "INSERT INTO products (category, name, description, price, promo_code, stock) "
            "VALUES (?, ?, ?, ?, ?, ?)",
            (data['category'], data['name'], data['description'], data['price'], promo_code, data['stock'])
        )
        conn.commit()
        await message.answer(
            f"‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {data['name']}\n"
            f"–¶–µ–Ω–∞: {data['price']}‚ÇΩ\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {data['stock']} —à—Ç.\n"
            f"–ü—Ä–æ–º–æ–∫–æ–¥: {promo_code if promo_code else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}",
            reply_markup=admin_kb()
        )
    except sqlite3.IntegrityError as e:
        if "UNIQUE constraint failed" in str(e):
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–æ–∫–æ–¥:"
            )
            return
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()
        await state.set_state(AdminStates.menu)

@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é", AdminStates.menu)
async def restock_start(message: types.Message, state: FSMContext):
    empty_categories = get_empty_categories()
    if not empty_categories:
        await message.answer("–ù–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –Ω—É–ª–µ–≤—ã–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏")
        return
    builder = InlineKeyboardBuilder()
    for cat in empty_categories:
        builder.button(text=cat, callback_data=f"restock_cat_{cat}")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.restock_category)

@dp.callback_query(F.data.startswith("restock_cat_"), AdminStates.restock_category)
async def restock_category_select(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    category = callback.data.split("_", 2)[2]
    await state.update_data(restock_category=category)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –¥–æ–±–∞–≤afers–Ω–∏—è:")
    await state.set_state(AdminStates.restock_amount)

@dp.message(AdminStates.restock_amount)
async def restock_process(message: types.Message, state: FSMContext):
    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):")
        return
    amount = int(message.text)
    data = await state.get_data()
    category = data['restock_category']
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    try:
        cursor.execute(
            "UPDATE products SET stock = stock + ? WHERE category = ?",
            (amount, category)
        )
        conn.commit()
        await message.answer(
            f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è {category} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ {amount} –µ–¥–∏–Ω–∏—Ü!",
            reply_markup=admin_kb()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        conn.close()
        await state.set_state(AdminStates.menu)

@dp.message(F.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å—Ç–∞—Ç–∫–∏", AdminStates.menu)
async def view_stock(message: types.Message):
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    cursor.execute("SELECT category, name, stock FROM products ORDER BY category")
    products = cursor.fetchall()
    conn.close()
    if not products:
        await message.answer("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ")
        return
    text = "üì¶ –û—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:\n\n"
    current_category = None
    for category, name, stock in products:
        if category != current_category:
            text += f"\n<b>{category}</b>\n"
            current_category = category
        text += f"{name}: {stock} —à—Ç.\n"
    await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", AdminStates.menu)
async def delete_start(message: types.Message, state: FSMContext):
    categories = get_categories(include_empty=True)
    if not categories:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        return
    builder = InlineKeyboardBuilder()
    for cat in categories:
        builder.button(text=cat, callback_data=f"delcat_{cat}")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.delete_select_category)

@dp.callback_query(F.data.startswith("delcat_"), AdminStates.delete_select_category)
async def delete_choose_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    category = callback.data.split("_", 1)[1]
    await state.update_data(del_category=category)
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    products = cursor.execute(
        "SELECT id, name FROM products WHERE category = ?",
        (category,)
    ).fetchall()
    conn.close()
    if not products:
        await callback.message.answer("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        return
    builder = InlineKeyboardBuilder()
    for pid, name in products:
        builder.button(text=name, callback_data=f"delprod_{pid}")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(AdminStates.delete_select_product)

@dp.callback_query(F.data.startswith("delprod_"), AdminStates.delete_select_product)
async def delete_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    product_id = int(callback.data.split("_", 1)[1])
    conn = sqlite3.connect('shop.db')
    cursor = conn.cursor()
    try:
        cursor.execute("DELETE FROM purchases WHERE product_id = ?", (product_id,))
        cursor.execute("DELETE FROM products WHERE id = ?", (product_id,))
        conn.commit()
        await callback.message.answer(
            "‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.",
            reply_markup=admin_kb()
        )
    except Exception as e:
        await callback.message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}",
            reply_markup=admin_kb()
        )
    finally:
        conn.close()
        await state.set_state(AdminStates.menu)

@dp.message(F.text == "–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω–∫–∏", AdminStates.menu)
async def exit_admin(message: types.Message, state: FSMContext):
    await message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()
    await start(message)


@dp.callback_query(F.data.startswith("cat_"))
async def show_products(callback: types.CallbackQuery):
    await callback.answer()
    try:
        category = callback.data.split("_", 1)[1]
        await callback.message.edit_text(
            f"üîç –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=products_kb(category)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤")

@dp.callback_query(F.data.startswith("prod_"))
async def show_product(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        product_id = int(callback.data.split("_", 1)[1])
        conn = sqlite3.connect('shop.db')
        cursor = conn.cursor()
        product = cursor.execute(
            "SELECT name, description, price, stock FROM products WHERE id = ?",
            (product_id,)
        ).fetchone()
        if not product or product[3] <= 0:
            await callback.message.edit_text("üòî –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            return
        name, desc, price, stock = product
        await callback.message.edit_text(
            f"üéÅ *{name}*\n\n"
            f"üìù {desc}\n"
            f"üíµ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
            f"üì¶ –û—Å—Ç–∞–ª–æ—Å—å: {stock} —à—Ç.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–æ–∫—É–ø–∫–∏",
            reply_markup=payment_kb(),
            parse_mode="Markdown"
        )
        await state.set_state(PaymentStates.confirm_payment)
        await state.update_data(product_id=product_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞")
    finally:
        conn.close()

@dp.callback_query(F.data == "confirm_payment", PaymentStates.confirm_payment)
async def process_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    conn = None
    try:
        data = await state.get_data()
        product_id = data['product_id']
        user_id = callback.from_user.id
        conn = sqlite3.connect('shop.db')
        cursor = conn.cursor()
        product = cursor.execute(
            "SELECT name, description, price, stock FROM products WHERE id = ?",
            (product_id,)
        ).fetchone()
        if not product or product[3] <= 0:
            await callback.message.edit_text("üòî –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
            return
        name, desc, price, stock = product
        payment_id, payment_url = create_yookassa_payment(price, f"–ü–æ–∫—É–ø–∫–∞: {name}", product_id)
        await state.update_data(payment_id=payment_id, user_id=user_id)
        await callback.message.edit_text(
            f"üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä–∞ *{name}* –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:\n\n"
            f"[–û–ø–ª–∞—Ç–∏—Ç—å {price}‚ÇΩ]({payment_url})\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂' –Ω–∏–∂–µ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment")],
                [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
            ]),
            parse_mode="Markdown"
        )
        await state.set_state(PaymentStates.awaiting_payment_confirmation)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞")
    finally:
        if conn:
            conn.close()

@dp.callback_query(F.data == "check_payment", PaymentStates.awaiting_payment_confirmation)
async def check_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    conn = None
    try:
        data = await state.get_data()
        payment_id = data['payment_id']
        product_id = data['product_id']
        user_id = data['user_id']
        payment = Payment.find_one(payment_id)
        if payment.status == "succeeded":
            conn = sqlite3.connect('shop.db')
            cursor = conn.cursor()
            product = cursor.execute(
                "SELECT name, promo_code, stock FROM products WHERE id = ?",
                (product_id,)
            ).fetchone()
            if not product or product[2] <= 0:
                await callback.message.edit_text("üòî –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                return
            name, promo_code, stock = product
            cursor.execute(
                "UPDATE products SET stock = stock - 1 WHERE id = ? AND stock > 0",
                (product_id,)
            )
            if cursor.rowcount == 0:
                await callback.message.edit_text("üòî –¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
                return
            cursor.execute(
                "INSERT INTO purchases (user_id, product_id) VALUES (?, ?)",
                (user_id, product_id)
            )
            purchase_id = cursor.lastrowid
            conn.commit()
            await callback.message.edit_text(
                f"‚úÖ –ü–æ–∫—É–ø–∫–∞ #{purchase_id} —Å–æ–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üéÅ –¢–æ–≤–∞—Ä: {name}\n"
                f"üîë –ü—Ä–æ–º–æ–∫–æ–¥: `{promo_code}`\n\n"
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã - –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /support",
                parse_mode="Markdown",
                reply_markup=support_kb()
            )
            await state.clear()
        elif payment.status == "canceled" or payment.status == "failed":
            await callback.message.edit_text(
                "‚ùå –ü–ª–∞—Ç–µ–∂ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –Ω–µ —É–¥–∞–ª—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=main_kb()
            )
            await state.clear()
        else:
            await callback.message.edit_text(
                "‚è≥ –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", callback_data="check_payment")],
                    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_payment")]
                ])
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        if conn:
            conn.rollback()
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞")
    finally:
        if conn:
            conn.close()

@dp.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        await callback.message.edit_text(
            "‚ùå –ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ")
    finally:
        await state.clear()

@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.answer()
    try:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=main_kb()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ")


if __name__ == "__main__":
    from aiogram.fsm.strategy import FSMStrategy
    dp.fsm.strategy = FSMStrategy.CHAT

    async def main():
        await dp.start_polling(bot, skip_updates=True)

    import asyncio
    asyncio.run(main())